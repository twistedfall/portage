Description: Fix FTBFS with kernel 5.4
Author: Paolo Pisati <paolo.pisati@canonical.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1848586

--- a/module/evdi_drv.h
+++ b/module/evdi_drv.h
@@ -20,7 +20,11 @@
 #include <drm/drm_crtc_helper.h>
 #include <drm/drm_rect.h>
 #include <drm/drm_gem.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0)
+#include <linux/dma-resv.h>
+#else
 #include <linux/reservation.h>
+#endif
 #include "evdi_debug.h"
 
 #define DRIVER_NAME   "evdi"
@@ -51,8 +55,13 @@
 	struct page **pages;
 	void *vmapping;
 	struct sg_table *sg;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0)
+	struct dma_resv *resv;
+	struct dma_resv _resv;
+#else
 	struct reservation_object *resv;
 	struct reservation_object _resv;
+#endif
 };
 
 #define to_evdi_bo(x) container_of(x, struct evdi_gem_object, base)
@@ -112,8 +121,11 @@
 
 struct drm_gem_object *evdi_gem_prime_import(struct drm_device *dev,
 					     struct dma_buf *dma_buf);
-struct dma_buf *evdi_gem_prime_export(struct drm_device *dev,
-				      struct drm_gem_object *obj, int flags);
+struct dma_buf *evdi_gem_prime_export(
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
+		struct drm_device *dev,
+#endif
+		struct drm_gem_object *obj, int flags);
 
 int evdi_gem_vmap(struct evdi_gem_object *obj);
 void evdi_gem_vunmap(struct evdi_gem_object *obj);
--- a/module/evdi_drv.c
+++ b/module/evdi_drv.c
@@ -81,8 +81,11 @@
 }
 
 static struct drm_driver driver = {
-	.driver_features = DRIVER_MODESET | DRIVER_GEM | DRIVER_PRIME
-			 | DRIVER_ATOMIC,
+	.driver_features = DRIVER_MODESET | DRIVER_GEM
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
+		| DRIVER_PRIME
+#endif
+		| DRIVER_ATOMIC,
 #if KERNEL_VERSION(4, 12, 0) > LINUX_VERSION_CODE
 	.load = evdi_driver_load,
 #endif
--- a/module/evdi_gem.c
+++ b/module/evdi_gem.c
@@ -61,7 +61,11 @@
 		return NULL;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
 	reservation_object_init(&obj->_resv);
+#else
+	dma_resv_init(&obj->_resv);
+#endif
 	obj->resv = &obj->_resv;
 
 	return obj;
@@ -255,7 +259,11 @@
 	if (gem_obj->dev->vma_offset_manager)
 		drm_gem_free_mmap_offset(gem_obj);
 
-	reservation_object_fini(&obj->_resv);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
+	reservation_object_init(&obj->_resv);
+#else
+	dma_resv_init(&obj->_resv);
+#endif
 	obj->resv = NULL;
 }
 
@@ -569,8 +577,11 @@
 	return ERR_PTR(ret);
 }
 
-struct dma_buf *evdi_gem_prime_export(__maybe_unused struct drm_device *dev,
-				      struct drm_gem_object *obj, int flags)
+struct dma_buf *evdi_gem_prime_export(
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
+		__maybe_unused struct drm_device *dev,
+#endif
+		struct drm_gem_object *obj, int flags)
 {
 	struct evdi_gem_object *evdi_obj = to_evdi_bo(obj);
 	struct dma_buf_export_info exp_info = {
@@ -582,7 +593,9 @@
 		.priv = obj
 	};
 
-#if KERNEL_VERSION(4, 9, 0) <= LINUX_VERSION_CODE
+#if KERNEL_VERSION(5, 4, 0) <= LINUX_VERSION_CODE
+	return drm_gem_dmabuf_export(obj->dev, &exp_info);
+#elif KERNEL_VERSION(4, 9, 0) <= LINUX_VERSION_CODE
 	return drm_gem_dmabuf_export(dev, &exp_info);
 #else
 	return dma_buf_export(&exp_info);
